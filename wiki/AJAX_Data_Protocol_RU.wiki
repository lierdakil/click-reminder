#summary Описание протокола обмена сообщениями фронтенда и бэкенда

=Введение=

Система строится на модели запрос-ответ: фронтенд ("клиент") посылает запросы, а бэкенд ("сервер"), в зависимости от данных, полученных в запросе, возвращает соответствующий ситуации ответ или сообщение об ошибке. При этом сервер не может слать запросы клиенту: это ограничение связано с техническими ограничениями парадигмы AJAX.

=Общий формат сообщений=

Запросы ДОЛЖНЫ содержать параметр `action`. Так же, в зависимости от параметра `action` запросы могут быть ДОЛЖНЫ содержать любые другие параметры.

В параметре `action` СЛЕДУЕТ передавать одну из следующих величин:

 * `login`
 * `logout`
 * `checkSID`
 * `getItemList`
 * `getUpdateList`
 * `getItemProps`
 * `setItemProps`
 * `addItem`
 * `delItem`
 * `registerUser`
 * `deleteUser`

==Формат запросов и ожидаемые ответы==

Запросы представляют из себя JSON-строки, передаваемые в теле запроса POST с заголовком content-type: application/json.

Ответы так же являются JSON-строками и передаются в теле HTTP-ответа с заголовком content-type: application/json.

|| Action || Запрос || Ожидаемый ответ ||
|| `login` || `{action:login,user:"str",pass:"str")}` || `<sid>` ||
|| `logout` || `{action:logout,sid:<sid>}` || _null_ ||
|| `checkSID` || `{action:checkSID,sid:<sid>}` || `<timestamp>` ||
|| `getItemList` || `{action:getItemList,sid:<sid>}` || `[id1,...,idN]`<br>idN -- численный уникальный идентификатор N-того элемента ||
|| `getUpdateList` || `{action:getItemList,sid:<sid>,timestamp:<timestamp>}` || `[id1,...,idN]`<br>idN -- численный уникальный идентификатор N-того элемента ||
|| `getItemProps` || `{action:getItemProps,sid:<sid>,iid:<item_id>,props:[name1,...,nameN]}`<br>где nameN -- название свойств, которые требуется получить || `{name1:"value1",...,nameN:"valueN"}` ||
|| `setItemProps` || `{action:setItemProps,sid:<sid>,iid:<item_id>,props:{name1:"value1",...,nameN:"valueN"}}`<br>где nameN название свойства, которому должно быть присвоено значение valueN || _null_ ||
|| `addItem` || `{action:addItem,sid:<sid>}` || `<item_id>` ||
|| `delItem` || `{action:delItem,sid:<sid>,iid:<item_id>}` || _null_ ||
|| `registerUser` || `{action:registerUser,user:"str",email:"str",pass:"str"}` || _null_ ||
|| `deleteUser` || `{action:deleteUser,sid:<sid>,user:"str",email:"str",pass:"str"}` || _null_ ||

Здесь `<sid>` -- буквенно-цифровой уникальный идентификатор текущей сессии, переданный клиенту при логине и хранящийся в кукисах.

`<item_id>` -- уникальный целочисленный идентификатор элемента, полученный клиентом в ответ на запрос `getItemList` или `addItem` и хранящийся в свойствах объекта, являющегося визуальным представлением элемента.

`<timestamp>` -- UNIX-время на сервере (с точностью до 0.0001 сек), получаемое клиентом в ответ на запрос checkSID и передаваемое при запросе обновлений `getUpdateList`. В ответ на запрос обновлений возвращаются только элементы, время создания или изменения которых _позже_ переданного в параметре timestamp.

`"str"` -- некая строка.

==Сообщения об ошибках==

Сообщения об ошибках передаются с использованием кодов статуса HTTP. Нормальный ответ сервера передается с кодом статуса 200 OK. Если же произошла ошибка, статус устанавливается в 500 Internal Server Error. При любых других статусах поведение клиента неопределено.

Отчет об ошибке представляет собой JSON-строку в теле HTTP ответа с с заголовком content-type: application/json. Он ДОЛЖЕН содержать целочисленное поле `errcode`. В зависимости от значения `errcode` так же может содержать другие поля.
Возможные коды ошибок с описанием приведены ниже.

|| Название || Значение || Описание || Запросы, вызывающие ||
||ERR_NO_MSG||1||Запрос не является JSON-строкой или пуст|| _any_ ||
||ERR_NO_ACT||2||Запрос не имеет параметра `action`|| _any_ ||
||ERR_LOGIN||3||Невозможно войти: пользователя не существует или неверный пароль|| `login` ||
||ERR_DB||4||Ошибка при запросе к базе данных|| _any_ ||
||ERR_NO_SID||5||Идентификатор сессии истек, не существует или не был передан|| except `login`, `registerUser` ||
||ERR_NO_IID||6||Идентификатор элемента не был передан|| `getItemProps`, `setItemProps`, `delItem` ||
||ERR_NO_USER||7||Не передано имя пользователя|| `login`, `registerUser`, `deleteUser` ||
||ERR_NO_EMAIL||8||Не передан email|| `registerUser`, `deleteUser` ||
||ERR_NO_PASS||9||Не передан пароль|| `login`, `registerUser`, `deleteUser` ||
||ERR_NO_PROPS||10||Не указаны свойства для чтения или записи|| `getItemProps`, `setItemProps` ||
||ERR_USER_EXISTS||11||Указанный логин существует|| `registerUser` ||
||ERR_DELE_FAIL||12||Не удалось удалить пользователя, наиболее вероятны неверные данные|| `deleteUser` ||
